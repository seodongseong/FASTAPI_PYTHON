services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: kafka-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network      

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka-broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"    # 내부용(INTERNAL) 포트 그냥 노출해도 무방
      - "29092:29092"  # 외부용(EXTERNAL) 포트: 호스트/스프링에서 접속
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      # 1) 리스너 선언: INTERNAL(컨테이너 간), EXTERNAL(호스트 접속)
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

      # 2) 편의 옵션
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    networks:
      - app-network

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8686:8080"   # http://localhost:8686
    environment:
      KAFKA_CLUSTERS_0_NAME: local-kafka-cluster
      # 내부 리스너로 접속(도커 네트워크의 서비스명)
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
    external: true
    name: 03_kafka_app-network